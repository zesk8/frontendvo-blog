<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frontend VO Blog</title>
    <description>We&#39;re a bunch of guys working at vincoorbis doing front-end stuff
</description>
    <link>http://zesk8.github.io/</link>
    <atom:link href="http://zesk8.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sat, 07 Nov 2015 23:36:11 -0600</pubDate>
    <lastBuildDate>Sat, 07 Nov 2015 23:36:11 -0600</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>Unit testing with Mocha</title>
        <description>&lt;p&gt;Currently testing has become an essential part of every development, it helps us to detect errors in an automatized way, we only need to write our suite test and every time we want to test our application we only run a simple command, There are different types of testing, such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;End-to-End testing&lt;/li&gt;
&lt;li&gt;Integration testing&lt;/li&gt;
&lt;li&gt;Functional testing&lt;/li&gt;
&lt;li&gt;Unit testing&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But in this post we&amp;#39;ll focus on unit testing which are in charge of testing our code as a unit that we define, in this case a unit will be a javascript function.&lt;/p&gt;

&lt;p&gt;In this post we&amp;#39;ll learn how to write tests with Mocha and use Phantom.js to run our tests.&lt;/p&gt;

&lt;p&gt;First of all we need to install our dependencies:&lt;/p&gt;

&lt;p&gt;Phantom.js:&lt;/p&gt;

&lt;p&gt;The easiest way to install phantom (in OS X) is through &lt;a href=&quot;http://brew.sh/&quot;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ brew install phantomjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using a different OS, you can install the &lt;a href=&quot;http://phantomjs.org/download.html&quot;&gt;binary&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;mocha-phantomjs:&lt;/p&gt;

&lt;p&gt;We&amp;#39;ll use this module to run our mocha tests through phantom, we install it through npm:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;$ npm install -g mocha-phantomjs
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our project structure will be like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;├── tests/
|   └── test.js
├── index.html
└── package.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our package.json we define mocha and chai:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mocha&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;1.0.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;description&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;index.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;scripts&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;test&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;echo \&amp;quot;Error: no test specified\&amp;quot; &amp;amp;&amp;amp; exit 1&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;devDependencies&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s2&quot;&gt;&amp;quot;mocha&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;chai&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;*&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;author&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;s2&quot;&gt;&amp;quot;license&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;ISC&amp;quot;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our index.html will have the configuration for mocha:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt; Tests &lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;stylesheet&amp;quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./node_modules/mocha/mocha.css&amp;quot;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;mocha&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./node_modules/mocha/mocha.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;./node_modules/chai/chai.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Inital configuration for mocha --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;ui&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;bdd&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;reporter&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;chai&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Our test --&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script &lt;/span&gt;&lt;span class=&quot;na&quot;&gt;src=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test/test.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;&amp;lt;!-- Run mocha through phantom or in browser--&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;mochaPhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mochaPhantomJS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mocha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our script file:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;window&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;

  &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;prototype&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;saySomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot; wants to say: &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;word&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our script is a simple self invoked function with a main function and a prototype function which return a string with the values passed to both functions, our main function (and its prototype function) will be our unit to test.&lt;/p&gt;

&lt;p&gt;And our test will look like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;constructor&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// Test if our function person has a default value for variable name, this test will fail&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should have a default name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Jimi&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Test if the initial value is the same after call the variable directly&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should set person&amp;#39;s name&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Daniel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Daniel&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Test if the return message is correct&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;say something&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should say something&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Daniel&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;saySomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Hi Friends!!&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Daniel wants to say: Hi Friends!!&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Let&amp;#39;s dive into our code test:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;describe&lt;/strong&gt; - The main purpose for the &lt;strong&gt;describe&lt;/strong&gt; function is grouping test cases, we can think of these functions as containers, we see two &lt;strong&gt;describe&lt;/strong&gt; functions inside the first one, in that case they have the same purpose, serve as containers, our first &lt;strong&gt;describe&lt;/strong&gt; function is our container for all our tests, and the second ones are containers for a specific group of test.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;it&lt;/strong&gt; - Function to write a test case, inside every &lt;strong&gt;it&lt;/strong&gt; function we&amp;#39;ll put our assertions commands for our test case.&lt;/p&gt;

&lt;p&gt;Inside our &lt;strong&gt;it&lt;/strong&gt; function there&amp;#39;re some assertions commands from chai library&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;expect&lt;/strong&gt; - With chai we can write our test in two different styles, assertion style and BDD style, in this case we use a BDD style exposed through &lt;strong&gt;expect&lt;/strong&gt; function, we use BDD style because it provides us a more descriptive methods at the moment to read our test, but if you want to know more about the different styles, you can check the &lt;a href=&quot;http://chaijs.com/guide/styles/&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;run-our-tests&quot;&gt;Run our tests&lt;/h2&gt;

&lt;p&gt;In the root of our folder we type this into our console:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;mocha-phantomjs index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;and in our console we&amp;#39;ll see the results:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mocha-test.png&quot; alt=&quot;Mocha test&quot;&gt;  &lt;/p&gt;

&lt;p&gt;As you can see, it is really easy to test our code using mocha, chai and phantom and now we can write tests for our projects, a more advanced use could be, using phantom.js in a different server where we&amp;#39;ll run our tests and use something like &lt;a href=&quot;https://jenkins-ci.org/&quot;&gt;Jenkins&lt;/a&gt; for reporting results.&lt;/p&gt;
</description>
        <pubDate>Sat, 07 Nov 2015 17:00:00 -0600</pubDate>
        <link>http://zesk8.github.io/15/11/Unit-testing-with-mocha</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/11/Unit-testing-with-mocha</guid>
        
        
        <category>coffescript</category>
        
        <category>javascript</category>
        
        <category>front-end</category>
        
        <category>mocha</category>
        
        <category>unit</category>
        
        <category>testing</category>
        
        <category>chai</category>
        
        <category>phantomjs</category>
        
      </item>
    
      <item>
        <title>Create your first emberjs application</title>
        <description>&lt;p&gt;The JavaScript frameworks world is getting more and more crowded. Together with such famous frameworks as angularJS and backboneJS, we find emberJS. The main advantage of EmberJS against its competitors is that it can be used for both, major and minor projects. In this article we will learn how to install and create our first application thanks to emberJS.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;The installation is very easy. Previously, we should have installed git and nodeJS and its package manager npm (Who hasn&amp;#39;t done it yet?).&lt;/p&gt;

&lt;p&gt;To check if we have already installed nodeJS or not or its version, we must write to the console:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`node --version`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After this, we can install emberJS and its dependencies, using the nodeJS package manager: npm.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`npm install -g ember-cli`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Linux and Mac users must be logged in as the root user, Windows users as the administrator.&lt;/p&gt;

&lt;p&gt;We will also install phantomJS to perform and run our tests.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`npm install -g phanthomjs2`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is all! EmberJS is already installed in our computer. Let&amp;#39;s check:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`ember -v`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;creating-my-first-app&quot;&gt;Creating my first app&lt;/h2&gt;

&lt;p&gt;EmberJS has its own generator for most everyday tasks we have to perform when we are developing an app with it. We should use this generator to create the basic structure of our application:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`ember new name-my-vinco-app`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So, a new folder will be created with the name we provided to our application; in this case: name-my-vinco-app. After this, if we go into our folder and we run our server, we will see our first application running!.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`cd name-my-vinco-app`
`ember server`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If all goes well, our local testing and development address will be &lt;a href=&quot;http://localhost:4200&quot;&gt;http://localhost:4200&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As our future intention is to have our application in a production server, we will need to compile our environment when we finish working with it and want to move it:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;`ember build --environment=production`
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate a folder on our dist/directory with everything we need to run in a production environment.&lt;/p&gt;

&lt;p&gt;With this we will have the basics to start our journey with emberJS!&lt;/p&gt;

&lt;h2 id=&quot;basic-concepts&quot;&gt;Basic concepts&lt;/h2&gt;

&lt;p&gt;EmberJS is not a MVC* framework like anything else, since it has models, views (templates), controllers and routes, apart from components.&lt;/p&gt;

&lt;h5 id=&quot;strong-strong&quot;&gt;&lt;strong&gt;MODEL, VIEW, CONTROLLER&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;EmberJS creates the first model, view and controller in our application automatically. However, we can create our MVC manually or through ember generator as well.&lt;/p&gt;

&lt;p&gt;In this case, almost everything works like in any other framework: in the view we can call the instances we have generated on the controller, always with , and use our models in our controller.&lt;/p&gt;

&lt;h5 id=&quot;strong-strong&quot;&gt;&lt;strong&gt;COMPONENTS&lt;/strong&gt;&lt;/h5&gt;

&lt;p&gt;Components are small code pieces that we can include as tags in a view. We can create them adding certain logic through our controller or the component itself.&lt;/p&gt;

&lt;p&gt;And you, you not created your first application with emberjs yet? what are you waiting for?!!&lt;/p&gt;
</description>
        <pubDate>Mon, 07 Sep 2015 16:00:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/09/create-your-first-emberjs-app</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/09/create-your-first-emberjs-app</guid>
        
        
        <category>ember</category>
        
        <category>emberjs</category>
        
        <category>javascript</category>
        
        <category>front-end</category>
        
        <category>frameworks</category>
        
      </item>
    
      <item>
        <title>Introduction to CoffeeScript</title>
        <description>&lt;p&gt;CoffeeScript is the most used pre-compiled language to code in javascript. In this post we cover some basic aspects about CoffeeScript and why it&amp;#39;s so attractive to many developers.&lt;/p&gt;

&lt;h3 id=&quot;pros-and-cons&quot;&gt;Pros and cons&lt;/h3&gt;

&lt;p&gt;Some benefits of using CoffeeScript are:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;code in a more readable syntax&lt;/li&gt;
&lt;li&gt;code is more easy to maintain&lt;/li&gt;
&lt;li&gt;apply best practices at the moment of campilation&lt;/li&gt;
&lt;li&gt;shorter development time&lt;/li&gt;
&lt;li&gt;no more &amp;quot;;&amp;quot;&lt;/li&gt;
&lt;li&gt;a complete class system&lt;/li&gt;
&lt;li&gt;identation is part of the language&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;On the other hand many people mention some disadvantages of using CoffeeScript:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A compilation step is necessary (we can use a yeoman generator to deal with this)&lt;/li&gt;
&lt;li&gt;difficult to debug (solved with source maps)&lt;/li&gt;
&lt;li&gt;difficult to learn (not really, with 2 hours of reading &lt;a href=&quot;http://arcturo.github.io/library/coffeescript/&quot;&gt;The Little Book on CoffeeScript&lt;/a&gt; we can learn a lot)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As we can see there is really no disadvantages to using CoffeeScript, in fact, a technical reason not to use it doesn&amp;#39;t exist. But one important thing to consider is that CoffeeScript isn&amp;#39;t a substitute to learning javascript &lt;strong&gt;it&amp;#39;s just a beautiful way to write javascript&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;general-overview&quot;&gt;General overview&lt;/h3&gt;

&lt;h4 id=&quot;variables&quot;&gt;Variables&lt;/h4&gt;

&lt;p&gt;We don&amp;#39;t have to use the keyword &lt;strong&gt;var&lt;/strong&gt;, CoffeeScript automatically adds this for us at the moment of campilation, so we don&amp;#39;t have to worry about variable hoisting or undeclared variables.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# string&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;bar&amp;#39;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# number&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;num = &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# boolean, instead of true or false values we can use more descriptive words: is, yes, not, isnt&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;isTrue = &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt; 

&lt;span class=&quot;c1&quot;&gt;#array&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;numbers = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;#objects&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;student =&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;height: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;1.65 m&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;gender: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;male&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;brothers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Jess&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In CoffeeScript we can assign values from an array to differente variables:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# compile in: va ref = [1, 2], var foo = ref[0], var bar = ref[1];&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;arrays&quot;&gt;Arrays&lt;/h4&gt;

&lt;p&gt;Arrays don&amp;#39;t suffer great changes, the easiest way to declare an array is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;numbers = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if we have an array with multiples values, we can declare our array like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# note that at the end of every line there isn&amp;#39;t a comma, CoffeeScript does it for us.&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;numbers = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;
  &lt;span class=&quot;mi&quot;&gt;9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;11&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Also we can define an array with a range:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;range = &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# compile in: var range = [1, 2, 3, 4, 5]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;objects&quot;&gt;Objects&lt;/h4&gt;

&lt;p&gt;To define an object, we don&amp;#39;t need curly braces instead of that, we use indentation to define our object.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;student =&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;height: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;1.65 m&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;age: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;33&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;gender: &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;male&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;brothers: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;Jess&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;conditionals&quot;&gt;Conditionals&lt;/h4&gt;

&lt;p&gt;In conditionals we can use more descriptive words:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;test = &lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;is&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;is true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;isnt&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;is not true&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# a ternary operation&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;result = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;test&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;then&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;is true&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;is not true&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;loops&quot;&gt;Loops&lt;/h4&gt;

&lt;p&gt;To loop through an array:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;..&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;num&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To loop through an object:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;people =&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;tom: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;31&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;billy: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;25&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;jess: &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;19&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;people&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;person&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;#39;is&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;functions&quot;&gt;Functions&lt;/h4&gt;

&lt;p&gt;To define a function we don&amp;#39;t need the keyword &lt;strong&gt;function&lt;/strong&gt; and also we don&amp;#39;t need curly braces, to define the body of our function we use &lt;strong&gt;-&amp;gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;foo = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;foo&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# with parameters:&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(bar) -&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;# with parameters initialized&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;foo = &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(bar = &amp;#39;start&amp;#39;) -&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;bar&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;interpolation-string&quot;&gt;Interpolation string&lt;/h4&gt;

&lt;p&gt;Quotes aren&amp;#39;t only used to define strings, we can interpolate strings with them if we use simple quotes, anything we put inside them will be treat as a string:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;word = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;#39;123 - this is a simple...string!!&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;But if we use double quotes we can use a special syntax to concatenate variables with strings:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;age = &lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;name = &lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;daniel&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; is &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# compile into: console.log(name + &amp;quot; is &amp;quot; + age)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And if we use triple double quotes we can write strings blocks and they can maintain their indentation:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;nv&quot;&gt;text = &lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  line one&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;  line two&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# print: line one\nline two&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id=&quot;classes&quot;&gt;Classes&lt;/h4&gt;

&lt;p&gt;CoffeeScript has an excellent abstraction of prototypal inheritance, so we can use &lt;strong&gt;classes&lt;/strong&gt; in javascript, we don&amp;#39;t have to deal with prototypes, CoffeeScript does the hard work for us and implement the best practices, let&amp;#39;s check an example:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-coffee&quot; data-lang=&quot;coffee&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;constructor: &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(@name) -&amp;gt;&lt;/span&gt;

  &lt;span class=&quot;nv&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;(meters) -&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;@name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; moved &amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;meters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;m.&amp;quot;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Snake&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Slithering...&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Horse&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Animal&lt;/span&gt;
  &lt;span class=&quot;nv&quot;&gt;move: &lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;-&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;alert&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Galloping...&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;45&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;sam = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Snake&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Sammy the Python&amp;quot;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;tom = &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Horse&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;Tommy the Palomino&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the code above we see some interesting things:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;@name&lt;/strong&gt; : this is the short code for: &lt;strong&gt;this.name&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;A parent class (Animal) exists as well as 2 classes (Snake, Horse) which extend the parent class&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;extends&lt;/strong&gt; : the keyword to extend a class&lt;/li&gt;
&lt;li&gt;In both sub-classes we can see that both overwrite the move method and inside of them we see the keyword &lt;strong&gt;super&lt;/strong&gt; which is the reference of the parent method.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If we put the compiled code in a browser console we&amp;#39;ll see that works perfectly.&lt;/p&gt;

&lt;h4 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h4&gt;

&lt;p&gt;CoffeeScript is a great tool which helps us improve our work and save development time, if you want to learn more about CoffeeScript you can check their own &lt;a href=&quot;http://coffeescript.org/&quot;&gt;site&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 06:00:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/09/introduction-to-coffeescript</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/09/introduction-to-coffeescript</guid>
        
        
        <category>coffescript</category>
        
        <category>javascript</category>
        
        <category>front-end</category>
        
      </item>
    
      <item>
        <title>Quick start with Electron</title>
        <description>&lt;h2 id=&quot;starter-aplication-with-electron&quot;&gt;Starter aplication with electron&lt;/h2&gt;

&lt;p&gt;Electron is a framework to build cross platform applications using only web technologies(like JavaScript, CSS and HTML),
this framework has a little api with some options that help us in this purpose.&lt;/p&gt;

&lt;p&gt;Electron is based a light version of Chromium web browser to parse web pages like desktop applications.&lt;/p&gt;

&lt;p&gt;One feature that makes so interesting this framework is the cross platform suport, for the applications developed,
we can create application distributions for windows, OSX and linux.&lt;/p&gt;

&lt;p&gt;For this example we&amp;#39;ll to create an example application and distribution for OSX, just follow the next steps:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;To Install &amp;quot;electron&amp;quot;  execute one of the following commands in your terminal:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;    &lt;span class=&quot;c&quot;&gt;# Install the `electron` command globally&lt;/span&gt;
    npm install electron-prebuilt -g

    &lt;span class=&quot;c&quot;&gt;# Install as a development dependency&lt;/span&gt;
    npm install electron-prebuilt --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;2.- After install it you must create a dir for your application and create three necessary files:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;    mkdir example_electron &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; touch package.json main.js index.html
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;3.- Well if all it&amp;#39;s ok at this poit, we must put into package.json the following code:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;your-app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;version&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;0.1.0&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;main&amp;quot;&lt;/span&gt;    &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;main.js&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;this contains the name of our aplication his version and the main file just like any node module.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;4.- In out main.js we must be something like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;app&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Module to control application life.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;browser-window&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Module to create native browser window.&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Report crashes to our server.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;crash-reporter&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Keep a global reference of the window object, if you don&amp;#39;t, the window will&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// be closed automatically when the JavaScript object is GCed.&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// Quit when all windows are closed.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;window-all-closed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// On OS X it is common for applications and their menu bar&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// to stay active until the user quits explicitly with Cmd + Q&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;platform&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;darwin&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;quit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// This method will be called when Electron has finished&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// initialization and is ready to create browser windows.&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;ready&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;c1&quot;&gt;// Create the browser window.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;BrowserWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;800&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;height&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;600&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// and load the index.html of the app.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;loadUrl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;file://&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;__dirname&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/index.html&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Open the devtools.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;openDevTools&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;

      &lt;span class=&quot;c1&quot;&gt;// Emitted when the window is closed.&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;closed&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// Dereference the window object, usually you would store windows&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// in an array if your app supports multi windows, this is the time&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// when you should delete the corresponding element.&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;mainWindow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;5.- Finally in the index.html put the following code:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;    &lt;span class=&quot;cp&quot;&gt;&amp;lt;!DOCTYPE html&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;html&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;head&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;title&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/head&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;body&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;Hello World!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
        We are using io.js &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
        and Electron &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;versions&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;electron&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;.
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;/body&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/html&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;6.- Now in terminal just type:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;  electron .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well now let&amp;#39;s create the application distribution. We must Copy electron.app(from your computer location) to our /desktop and change the name to app&lt;em&gt;example.app(or wathever) and then:
* 1.- Open electron.app with right click and select show package content option
* 2.- Then find Contents/Resources/default&lt;/em&gt;app
* 3.- Remove the content of this dir and put inside our application files&lt;/p&gt;

&lt;p&gt;Now just open app_example.app and as you can see now it shows your application !&lt;/p&gt;

&lt;p&gt;Also we can use an asar package for this porpuse, for this you must:
* 1.- Install asar:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;npm install -g asar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;2.- Create a package with your app like this:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;asar pack /your/app/path app.asar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;3.- Open electron.app with right click and select show content option&lt;/li&gt;
&lt;li&gt;4.- remove the dir Contents/Resources/default_app&lt;/li&gt;
&lt;li&gt;5.- Put your asar file inside of Contents/Resources&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now just open app_example.app and as you can see now it shows your application !&lt;/p&gt;
</description>
        <pubDate>Tue, 25 Aug 2015 14:30:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/08/quick-start-with-electron</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/08/quick-start-with-electron</guid>
        
        
        <category>electron</category>
        
      </item>
    
      <item>
        <title>Mobile First</title>
        <description>&lt;p&gt;There are plenty of posts talking about &lt;em&gt;mobile first&lt;/em&gt; for years, but let&amp;#39;s just review the main points of this topic.&lt;/p&gt;

&lt;h3 id=&quot;why-mobile-first&quot;&gt;Why mobile first?&lt;/h3&gt;

&lt;p&gt;So, basically mobile first tells us to design our applications and websites looking forward mobile devices as our priority. There are plenty of reasons, but lets just resume those on 3 main reasons&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Growth&lt;/li&gt;
&lt;li&gt;Restrictions&lt;/li&gt;
&lt;li&gt;Capabilities&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;growth&quot;&gt;Growth&lt;/h4&gt;

&lt;p&gt;We could take some numbers and demonstrate you that mobile devices are all around, but you already know that, I mean, seriously, even your aunts have smartphones, and your little cousins have iPads at the age you used to have a stick and a rock.
The mobile market has grown ridiculously from the last years.&lt;/p&gt;

&lt;h4 id=&quot;restrictions&quot;&gt;Restrictions&lt;/h4&gt;

&lt;p&gt;&lt;strong&gt;Screen size&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The size of the screen on mobile devices has been the big concern for all the people involved on a website. The first thing that comes to our mind, is the fact that with less screen size, we might have to sacrifice some information. And yes, that&amp;#39;s exactly right.
Think about all the stuff that is on your website, consider all navigation elements, irrelevant information, ads, secondary links, then you realize that a mobile first vision may be good to light your site.
Having a mobile first vision, let you design your website focusing on what your customers/visitors really need, it forces you to prioritize the information of your site.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Although in the last years mobile networks have been evolving, there&amp;#39;s still a difference with the internet connection of your home.
Mobile networks can be very expensive on some areas and connections are still somehow slow.
Designing mobile first, forces you to use a lot of techniques and tools to save the data plans of your customers/visitors. You don&amp;#39;t want them to stop visiting your site because it&amp;#39;s slow, do you?&lt;/p&gt;

&lt;p&gt;Some things you want to start doing or focus when developing an application/website, may include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Use sprites&lt;/li&gt;
&lt;li&gt;Concatenate and minify JS libraries and CSS.&lt;/li&gt;
&lt;li&gt;Use CSS 3&lt;/li&gt;
&lt;li&gt;Limit or remove JS libraries. Maybe you are just loading jQuery to make some tiny animation. Please don&amp;#39;t.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Maybe you want to check this out: &lt;a href=&quot;http://youmightnotneedjquery.com/&quot;&gt;http://youmightnotneedjquery.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Time and location&lt;/strong&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;“[...] I like to imagine people as ‘one eyeball and one thumb`. One thumb because they are likely to be holding their mobile in one hand and using a single thumb to control it; one eyeball because in many locations where mobile devices are used we only have people’s partial attention”
- Luke Wroblewski&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&quot;http://www.lukew.com/about/&quot;&gt;Luke Wroblewski&lt;/a&gt; wrote this amazing statement on his book &lt;a href=&quot;http://www.lukew.com/resources/mobile_first.asp&quot;&gt;Mobile first&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Basically, this means that mobile users doesn&amp;#39;t pay as much attention as a regular user. Time and location are some variables you have to struggle with.
So, maybe you have to start thinking new ways to get the attention of a mobile user. You have to be flexible, for the guy that visits your site while watching TV and for the one that makes a quick visit from the toilet.&lt;/p&gt;

&lt;h3 id=&quot;how-to&quot;&gt;How to?&lt;/h3&gt;

&lt;h4 id=&quot;content-over-navigation&quot;&gt;Content over navigation&lt;/h4&gt;

&lt;p&gt;Let&amp;#39;s take the mobile site of Youtube as an example. The first thing that Youtube shows, is the content you may be interested with. It shows you video recommendations based on the videos you watched earlier. Thats what Youtube wants you to focus in.
Then they have the main and secondary navigation elements, but as you can see, those elements take the minimum space.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mb-yt-content.png&quot; alt=&quot;Youtube&quot;&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Youtube put its content first and make the navigation very simple&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Same thing with the Facebook site, a large percentage of the screen shows you the content of your news feed. The navigation icons and submenu take a small space of the screen.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mb-fb-content.png&quot; alt=&quot;Facebook Content&quot;&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Facebook shows you first the content, the navigation icons take a secondary role&lt;/em&gt;  &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;strong&gt;Why is this important?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Well, as we talked about it earlier, you want your users to focus on the things your website provide. Facebook and Youtube run by the content, they want you to click a lot of links so they can learn about you and then show you the right ads.
If you have a site that sells flight tickets, the first thing that you want your users see, maybe is the flight reservation form.&lt;/p&gt;

&lt;h3 id=&quot;actions&quot;&gt;Actions&lt;/h3&gt;

&lt;p&gt;Apple has a Human Interface Guideline. There they have some recommendations about the size of the buttons, for mobile devices, obviously.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/UserExperience/Conceptual/MobileHIG/&quot;&gt;iOS Human Interface Guidelines&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But being just a little logical, we have to watch that the action buttons are good sized and good positioned so every user has easy access to them.&lt;/p&gt;

&lt;p&gt;Let&amp;#39;s take Youtube as an example again.
When you open a video, the main button is Play/Pause, which is the bigger part of the screen.
Then you have secondary button actions, from where you can like/dislike a video, add it to your favourites, share it, or flag it.
It&amp;#39;s not a coincidence that those buttons are placed right there. Studies demonstrate that most of the people is right handed, and most of the people uses their smartphones scrolling with the right thumb.
So, take a look to the screenshot, the share button is very reachable.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mb-yt-video.png&quot; alt=&quot;Youtube Video&quot;&gt;  &lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Action buttons are very reachable&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously, Youtube knows that the regular user just watch videos, and they want them to share the content of their site.&lt;/p&gt;

&lt;h3 id=&quot;nui&quot;&gt;NUI&lt;/h3&gt;

&lt;p&gt;The Natural User Interface principles enable direct interactions with the content, and reduce all the elements that are no content at all.
Mobile devices allows that things like gestures modify the way we explore the web. For example, the pinch gesture that allows you to zoom in or out. With that kind of gestures, you are saving yourself a button or other GUI element that explicitly do that action.&lt;/p&gt;

&lt;p&gt;Twitter has another good example, with the drag to refresh tweets gesture.&lt;/p&gt;

&lt;h3 id=&quot;oh-the-hover&quot;&gt;Oh, the hover&lt;/h3&gt;

&lt;p&gt;It&amp;#39;s almost obvious that the hover effect won&amp;#39;t work equally on a mobile device. Hey! you no longer have a mouse.
Hover must be treated differently on mobile devices, since we are looking for a different experience.&lt;/p&gt;

&lt;p&gt;Your options:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Have it on screen&lt;/li&gt;
&lt;li&gt;Tap or swipe&lt;/li&gt;
&lt;li&gt;Separate screen&lt;/li&gt;
&lt;li&gt;Disappear&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To choose an option, first you have to think if that thing that the hover does is really special.
If it is important, well,  maybe you have to make them static for the mobile experience and keep it on the screen.&lt;/p&gt;

&lt;p&gt;Your other option is to show it on tap or swipe. That&amp;#39;s a good one for actions or submenus that are important keeping them statics will mean a huge load of elements on first look.&lt;/p&gt;

&lt;p&gt;If the content of the hover is too big, maybe the best idea is to keep it on a different page.&lt;/p&gt;

&lt;p&gt;And lastly but not least, maybe you want to consider to disappear the content of the hover, you know, if its not very relevant.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Mobile first is not new at all. I decided to write this post because in my professional life, I still see how designers forget the mobile experience or they take for granted that using Twitter Bootstrap or ZURB Foundation they  have a mobile site guaranteed.
Maybe its hard to move from designing for Desktop to designing for mobile, but its proven that there are more advantages adopting a mobile first vision.&lt;/p&gt;

&lt;p&gt;If you want to learn more about this topic, I highly recommend you to read the book Luke Wroblewski wrote. This post is a resume I made by reading his book, its simply awesome how your design vision of a site changes after reading it.&lt;/p&gt;

&lt;p&gt;You should also follow him on twitter ( &lt;a href=&quot;https://twitter.com/lukew&quot;&gt;@lukew&lt;/a&gt; ) he posts good tips about mobile interfaces and experiences.&lt;/p&gt;
</description>
        <pubDate>Wed, 29 Jul 2015 07:10:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/07/mobile-first</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/07/mobile-first</guid>
        
        
        <category>design</category>
        
        <category>mobile</category>
        
      </item>
    
      <item>
        <title>Managing node.js and io.js with nvm</title>
        <description>&lt;p&gt;We use &lt;a href=&quot;https://nodejs.org&quot;&gt;node.js&lt;/a&gt; a lot (and &lt;a href=&quot;https://iojs.org&quot;&gt;io.js&lt;/a&gt; to a lesser degree) when doing development, powering a good portion of our toolkit like our &lt;a href=&quot;http://gruntjs.com&quot;&gt;grunt&lt;/a&gt; and &lt;a href=&quot;http://gulpjs.com&quot;&gt;gulp&lt;/a&gt; workflows, as well as running node.js itself as a server.&lt;/p&gt;

&lt;p&gt;Because of the fast pace of development in these two projects, sometimes we also find ourselves having to juggle various node.js/io.js versions by installing or uninstalling quite a few times, or even resorting to virtualization tools like &lt;a href=&quot;http://vagrantup.com&quot;&gt;vagrant&lt;/a&gt; or &lt;a href=&quot;https://docker.io&quot;&gt;docker&lt;/a&gt; to lock a project down to a given node.js/io.js version.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/creationix/nvm&quot;&gt;nvm&lt;/a&gt; is a different solution. It&amp;#39;s simply a helper bash script (for POSIX systems) that installs node.js/io.js into its own directory, as a subdirectory of nvm&amp;#39;s install dir:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm install v0.12.7
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which node
/home/nsdragon/Development/nvm/versions/node/v0.12.7/bin/node
&lt;span class=&quot;c&quot;&gt;# nvm is installed to /home/nsdragon/Development/nvm&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This also allows us to run &lt;code&gt;npm install -g&lt;/code&gt; without the need for superuser privileges:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g coffee-script
/home/nsdragon/Development/nvm/versions/node/v0.12.7/bin/coffee -&amp;gt; /home/nsdragon/Development/nvm/versions/node/v0.12.7/lib/node_modules/coffee-script/bin/coffee
/home/nsdragon/Development/nvm/versions/node/v0.12.7/bin/cake -&amp;gt; /home/nsdragon/Development/nvm/versions/node/v0.12.7/lib/node_modules/coffee-script/bin/cake
coffee-script@1.9.3 /home/nsdragon/Development/nvm/versions/node/v0.12.7/lib/node_modules/coffee-script
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which coffee
/home/nsdragon/Development/nvm/versions/node/v0.12.7/bin/coffee
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;managing-versions&quot;&gt;Managing versions&lt;/h2&gt;

&lt;p&gt;Aside from the obvious convenience that this provides, nvm is also able to manage, install and switch between versions:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm install iojs-v2.4.0  &lt;span class=&quot;c&quot;&gt;# Install io.js v2.4.0&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm ls                   &lt;span class=&quot;c&quot;&gt;# Shows versions installed&lt;/span&gt;
    iojs-v2.4.0
-&amp;gt;      v0.12.7
default -&amp;gt; v0.12.7
node -&amp;gt; stable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; v0.12.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
stable -&amp;gt; 0.12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; v0.12.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
iojs -&amp;gt; iojs-v2.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; iojs-v2.4.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm ls-remote            &lt;span class=&quot;c&quot;&gt;# Shows all versions available for install&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm use iojs-v2.4.0      &lt;span class=&quot;c&quot;&gt;# Now use what we just installed&lt;/span&gt;
Now using io.js v2.4.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;npm v2.13.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;node -v
v2.4.0

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;which node
/home/nsdragon/Development/nvm/versions/io.js/v2.4.0/bin/node

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm use v0.12.7          &lt;span class=&quot;c&quot;&gt;# Go back to using node.js v0.12.7&lt;/span&gt;
Now using node v0.12.7 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;npm v2.11.3&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;iojs-v2.4.0&amp;#39;&lt;/span&gt; &amp;gt; .nvmrc
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm use                  &lt;span class=&quot;c&quot;&gt;# Reads the first .nvmrc file it finds&lt;/span&gt;
Now using io.js v2.4.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;npm v2.13.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;default iojs-v2.4.0
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm use default          &lt;span class=&quot;c&quot;&gt;# Set iojs-v2.4.0 as default when opening new shells&lt;/span&gt;
Now using io.js v2.4.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;npm v2.13.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm ls                   &lt;span class=&quot;c&quot;&gt;# Shows that iojs-v2.4.0 is now default&lt;/span&gt;
-&amp;gt;  iojs-v2.4.0
        v0.12.7
default -&amp;gt; iojs-v2.4.0
node -&amp;gt; stable &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; v0.12.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
stable -&amp;gt; 0.12 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; v0.12.7&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
iojs -&amp;gt; iojs-v2.4 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;-&amp;gt; iojs-v2.4.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;default&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Even upgrading and migrating global node modules is straightforward:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm use iojs-v2.4.0
Now using io.js v2.4.0 &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;npm v2.13.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nvm reinstall-packages v0.12.7  &lt;span class=&quot;c&quot;&gt;# Install whatever packages v0.12.7 has&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;All this lets us quickly and easily manage whatever node.js/io.js version our project requires, as well as upgrade easily whenever needed.&lt;/p&gt;
</description>
        <pubDate>Mon, 20 Jul 2015 07:00:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/07/nodejs-and-iojs-with-nvm</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/07/nodejs-and-iojs-with-nvm</guid>
        
        
        <category>node</category>
        
        <category>nvm</category>
        
      </item>
    
      <item>
        <title>Nightwatch.js</title>
        <description>&lt;p&gt;Not long ago I started using &lt;a href=&quot;http://nightwatchjs.org/&quot;&gt;Nightwatch.js&lt;/a&gt; as a testing framework. Previously I had only tried &lt;a href=&quot;http://casperjs.org/&quot;&gt;Casper.js&lt;/a&gt;  but once I made my first test, I was convinced to use Nightwatch in my upcoming developments. But what is the difference between Nightwatch and Casper? Well, both provide a simple syntax as well as methods to make assertions and methods for performing commands (expect some element to be visible, click an item, etc.), both are well documented, but what makes the difference for me is that Casper makes use of &lt;a href=&quot;http://phantomjs.org/&quot;&gt;Phantom.js&lt;/a&gt; to run the test while Nightwatch makes use of &lt;a href=&quot;http://www.seleniumhq.org/&quot;&gt;Selenium&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Selenium and Phantom.js both have the same purpose (automated browsers), but Selenium provides the advantage of running the test in real browsers, which is very useful when you want to test your application to have consistency between browsers and on different operating systems.&lt;/p&gt;

&lt;p&gt;But, what exactly is Nightwatch.js?&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&amp;quot;Nightwatch is a framework written in Node.js for End-to-End testing. It uses Selenium WebDriver to run tests on the browser&amp;quot;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Well, now we can do a little test to see how Nightwatch works, but before that we need to have installed java and Nightwatch through npm:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install nightwatch -g
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The basic structure we need is:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;├── bin/
|   └── selenium-server-standalone-{VERSION}.jar
├── tests/
|   └── test.js
└── nightwatch.json
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Selenium jar can be downloaded at the following &lt;a href=&quot;http://selenium-release.storage.googleapis.com/index.html&quot;&gt;URL&lt;/a&gt;, antes de escribir nuestro test de ejemplo hay que establecer la configuración de nuestro archivo nightwatch.json (muy sencilla por cierto):&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;{
  &amp;quot;src_folders&amp;quot; : [&amp;quot;tests&amp;quot;], // Test folder

  // Default configuration for Selenium
  &amp;quot;selenium&amp;quot; : {
    &amp;quot;start_process&amp;quot; : true,
    &amp;quot;start_session&amp;quot; : true,
    &amp;quot;server_path&amp;quot; : &amp;quot;bin/selenium-server-standalone-{VERSION}.jar&amp;quot;,
    &amp;quot;host&amp;quot; : &amp;quot;127.0.0.1&amp;quot;,
    &amp;quot;port&amp;quot; : 4444
  },

  // Default configuration for tests
  &amp;quot;test_settings&amp;quot; : {
    &amp;quot;default&amp;quot; : {
      &amp;quot;launch_url&amp;quot; : &amp;quot;http://localhost&amp;quot;,
      &amp;quot;selenium_port&amp;quot;  : 4444,
      &amp;quot;selenium_host&amp;quot;  : &amp;quot;localhost&amp;quot;,
      &amp;quot;silent&amp;quot;: true,
      &amp;quot;screenshots&amp;quot; : {
        &amp;quot;enabled&amp;quot; : false,
        &amp;quot;path&amp;quot; : &amp;quot;&amp;quot;
      },
     // Browser configuration
      &amp;quot;desiredCapabilities&amp;quot;: {
        &amp;quot;browserName&amp;quot;: &amp;quot;firefox&amp;quot;,
        &amp;quot;javascriptEnabled&amp;quot;: true,
        &amp;quot;acceptSslCerts&amp;quot;: true
      }
    }
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Well now that we have the settings, we can write our simple test that simply visits the Nightwatch page through google.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;nx&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;s1&quot;&gt;&amp;#39;Find nightwatch in google&amp;#39;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;browser&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;https://www.google.com.mx/&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForElementVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;setValue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;input[type=text]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;nightwatchjs&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForElementVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;button[name=btnG]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;button[name=btnG]&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;click&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.srg .g:first-child h3 a&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;waitForElementVisible&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;body&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;containsText&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;.jumbotron h1&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Nightwatch&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see in the code, there are two kinds of methods, one that belongs to the browser object (to perform commands, eg click, pause, etc) and others belonging to assert object (to make assertions) and each has a descriptive name according to their function.&lt;/p&gt;

&lt;p&gt;In all methods, in order to locate the elements on the page, CSS selectors are used, but we are not limited to them, you can also use &lt;a href=&quot;http://doc.scrapy.org/en/0.12/topics/selectors.html&quot;&gt;XPath&lt;/a&gt; selectors.&lt;/p&gt;

&lt;p&gt;All that remains is to run our test and see how Nightwatch works. For that, we go to the root of our project in our terminal and run:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;nightwatch
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you can see, after running our test, it opened a new browser window indicated in our configuration file (firefox in our case). In addition, actions outlined in our test were executed, and the results sent to our terminal.&lt;/p&gt;

&lt;p&gt;This was just a small example of how Nightwatch works but clearly not everything that can be done, the possibilities of this framework are many, such as creating our own methods of assertions, our own methods of commands, running our tests in parallel (in different browsers at the same time) and much more, but we&amp;#39;ll see that in a future post, if you want to investigate further and review the list of methods of assertions and commands you can visit the &lt;a href=&quot;http://nightwatchjs.org/api&quot;&gt;API&lt;/a&gt; documentation Nightwatch.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 07:58:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/07/nightwatch</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/07/nightwatch</guid>
        
        
        <category>testing</category>
        
        <category>nightwatch</category>
        
        <category>end-to-end</category>
        
      </item>
    
      <item>
        <title>Front-end App Scaffolding with Yeoman, Grunt and Gulp</title>
        <description>&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://yeoman.io&quot;&gt;Yeoman&lt;/a&gt;&lt;/strong&gt; is a node-based tool for scaffolding new apps, whether they are simple web apps or complete full-stack solutions using pretty much any technology available. It works along with &lt;em&gt;generators&lt;/em&gt;, which are responsible for most of the scaffolding itself, as well as providing some degree of customization.&lt;/p&gt;

&lt;p&gt;Installing yeoman can be done like the following. Most generators also make use of &lt;a href=&quot;http://bower.io&quot;&gt;bower&lt;/a&gt;, along with either &lt;a href=&quot;http://gruntjs.com&quot;&gt;grunt&lt;/a&gt; or &lt;a href=&quot;http://gulpjs.com&quot;&gt;gulp&lt;/a&gt;, so we might as well do it all at once:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g yo grunt gulp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;generators&quot;&gt;Generators&lt;/h2&gt;

&lt;p&gt;A &lt;strong&gt;generator&lt;/strong&gt; is what does most of the work in scaffolding a project. Generators are responsible for setting up the directory structure, preparing the files, customizing the app based on user prompts, and even setting up external or additional tools to work with the generated code.&lt;/p&gt;

&lt;p&gt;Generators can be found on &lt;a href=&quot;http://yeoman.io/generators&quot;&gt;yeoman&amp;#39;s&lt;/a&gt; website, or just by searching the npm registry for &lt;code&gt;yeoman generator&lt;/code&gt;. They can be installed either globally or locally if you prefer to keep dependencies contained.&lt;/p&gt;

&lt;p&gt;After installing a generator, it&amp;#39;s used with the &lt;code&gt;yo&lt;/code&gt; command:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g generator-&amp;lt;name&amp;gt;
&lt;span class=&quot;c&quot;&gt;# ...&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Some generators also have &lt;em&gt;subtasks&lt;/em&gt; for creating new components, routes, or other framework-related tasks, like in &lt;a href=&quot;https://github.com/yeoman/generator-angular&quot;&gt;generator-angular&lt;/a&gt; (&lt;code&gt;yo angular:controller&lt;/code&gt;, &lt;code&gt;yo angular:directive&lt;/code&gt;, etc.) or &lt;a href=&quot;https://github.com/yeoman/generator-polymer&quot;&gt;generator-polymer&lt;/a&gt; (&lt;code&gt;yo polymer:element&lt;/code&gt;, &lt;code&gt;yo polymer:seed&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;Yeoman even provides its own &lt;a href=&quot;https://github.com/yeoman/generator-generator&quot;&gt;generator-generator&lt;/a&gt;, which scaffolds an actual yeoman generator if you can&amp;#39;t find one that satisfies your needs.&lt;/p&gt;

&lt;h2 id=&quot;a-quick-example&quot;&gt;A quick example&lt;/h2&gt;

&lt;p&gt;Let&amp;#39;s say we want a quick and simple webapp. The basic generators by the yeoman team are &lt;a href=&quot;https://github.com/yeoman/generator-webapp&quot;&gt;generator-webapp&lt;/a&gt; (which uses grunt) and &lt;a href=&quot;https://github.com/yeoman/generator-gulp-webapp&quot;&gt;generator-gulp-webapp&lt;/a&gt; (which uses gulp). We can install them both:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install -g generator-webapp generator-gulp-webapp
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And then set up a new webapp:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;mkdir -p ~/Dev/my-webapp &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;cd&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$_&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;yo webapp &lt;span class=&quot;c&quot;&gt;# or gulp-webapp for the gulp version&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This presents us with a prompt that allows us to select whether to use sass (instead of plain css), bootstrap, and modernizr (other generators may present you with different choices, or none at all):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Screenshot%202015-07-13%2018.30.31.png&quot; alt=&quot;yeoman prompt&quot;&gt;&lt;/p&gt;

&lt;p&gt;After choosing options, yeoman will go ahead and install everything it needs (as specified by the generator). Since this generator uses grunt and grunt plugins, as well as bower to manage browser packages, it will also do &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;bower install&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When all&amp;#39;s said and done, the final directory structure will be similar to this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/Screenshot%202015-07-13%2018.42.40.png&quot; alt=&quot;all the files&quot;&gt;&lt;/p&gt;

&lt;p&gt;And you can start working on the &lt;code&gt;app&lt;/code&gt; directory and run &lt;code&gt;grunt serve&lt;/code&gt; or anything else you need.&lt;/p&gt;

&lt;h2 id=&quot;grunt-and-gulp&quot;&gt;Grunt and Gulp&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;http://gulpjs.com&quot;&gt;Gulp&lt;/a&gt;&lt;/strong&gt; are node-based task runners that work with a &lt;a href=&quot;http://gruntjs.com/plugins&quot;&gt;plethora&lt;/a&gt; of &lt;a href=&quot;http://gulpjs.com/plugins/&quot;&gt;plugins&lt;/a&gt;, and are very commonly used as part of yeoman generators, although they can also be used on their own. The tasks that are available depend on the generator used, but common tasks include:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Creating a light-weight, temporary web server to preview the webapp (and open your browser automatically), and reload browsers when changes are made&lt;/li&gt;
&lt;li&gt;Watching project files to trigger other tasks on save (compile coffeescript/sass files or linting javascript files, for example)&lt;/li&gt;
&lt;li&gt;Building a project to generate an optimized er... build, with concatenated/minified javascript, CSS and HTML, suitable for serving directly&lt;/li&gt;
&lt;li&gt;Run test suites on your app, using test frameworks such as mocha or jasmine&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Tasks are available via the terminal:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt &lt;span class=&quot;c&quot;&gt;# same as grunt default&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt serve
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;grunt &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;or, for gulp:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp &lt;span class=&quot;c&quot;&gt;# same as gulp default&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp serve
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp build
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;gulp &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In addition, both have the ability to use CoffeeScript for its configuration file (for gulp, since v3.9.0). All that is needed (aside from the actual gruntfile.coffee or gulpfile.coffee) is that you install the interpreter:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sh&quot; data-lang=&quot;sh&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;npm install coffee-script
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;differences-between-grunt-and-gulp&quot;&gt;Differences between grunt and gulp&lt;/h2&gt;

&lt;p&gt;The main difference between grunt and gulp is the configuration file: &lt;code&gt;gruntfile.js&lt;/code&gt; and &lt;code&gt;gulpfile.js&lt;/code&gt;. In general, grunt is very configuration-heavy, while gulp is more declarative. I&amp;#39;ll explain what this means in the next couple of sections, but suffice to say the choice of either grunt or gulp is mostly personal and depends largely on what one feels more comfortable working with.&lt;/p&gt;

&lt;h3 id=&quot;grunt&quot;&gt;Grunt&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Grunt&lt;/strong&gt; configures its tasks as an array of plugins to call and work on files, one plugin at a time. Plugins can be configured with a &amp;#39;global&amp;#39; set of options, and also a specific set of options depending on the &lt;em&gt;target&lt;/em&gt; specified when running grunt (or any specific task). This can be used, for example, to compile sass in expanded mode and with sourcemaps when developing, but in compressed mode without sourcemaps when doing a build.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// grunt.initConfig&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;clean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// No default options for this one&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;dist&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// options for the dist target, e.g. grunt build calls clean:dist&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;files&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[{&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;.tmp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;lt;%= config.dist %&amp;gt;/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;s1&quot;&gt;&amp;#39;!&amp;lt;%= config.dist %&amp;gt;/.git*&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;server&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;.tmp&amp;#39;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// server target; grunt serve calls clean:server&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Grunt tasks are all run sequentially; that is, they run in the order in which they exist in the gruntfile, and only one at a time. This allows each task to finish completely before the next task is over. The downside of this is that for tasks that don&amp;#39;t depend on other tasks, this approach is slower, but it can be mitigated with plugins like &lt;a href=&quot;https://github.com/sindresorhus/grunt-concurrent&quot;&gt;grunt-concurrent&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;gulp&quot;&gt;Gulp&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Gulp&lt;/strong&gt;&amp;#39;s main advantage is that it&amp;#39;s much more declarative, and therefore more terse. It can be used to configure arbitrary tasks:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot; data-lang=&quot;js&quot;&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;autoprefixer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;gulp-autoprefixer&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;copyFiles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;source/**/*&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;s1&quot;&gt;&amp;#39;!source/sass/**/*&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;target&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sass&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(){&lt;/span&gt;
  &lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;source/sass/**/*.scss&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sass&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;outputStyle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;expanded&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;precision&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nx&quot;&gt;includePaths&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;sass-includes&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;autoprefixer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;browsers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;last 2 versions&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]}))&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;pipe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;dest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;target/styles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;gulp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;copyFiles&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Gulp works with files in &lt;em&gt;streams&lt;/em&gt;, which means that it can read them (via &lt;code&gt;gulp.src&lt;/code&gt;) and the contents piped through other gulp plugins, in a very similar way to how pipes work in unix systems, with the stream being written only after explicitely written (with &lt;code&gt;gulp.dest&lt;/code&gt;). Configuration for each plugin is also done at that point (as you can see for the sass plugin).&lt;/p&gt;

&lt;p&gt;Unlike grunt, gulp tasks can have explicit dependent tasks, and one task may depend on multiple other tasks, to be run after these dependencies are finished. In this case, gulp runs all the tasks concurrently, so tasks such as compilation and image optimization can run simultaneously.&lt;/p&gt;

&lt;p&gt;However, gulp can&amp;#39;t (yet) run tasks in an arbitrary order like grunt does, without having potentially complicated chains of dependencies. This too can also be solved with the &lt;a href=&quot;https://github.com/OverZealous/run-sequence&quot;&gt;run-sequence&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;On top of everything, gulp is able (thanks to &lt;a href=&quot;https://github.com/tkellen/js-interpret&quot;&gt;js-interpret&lt;/a&gt;) to read its configuration in any of the supported languages specified &lt;a href=&quot;https://github.com/tkellen/js-interpret/blob/master/index.js&quot;&gt;here&lt;/a&gt;, provided the relevant interpreter is installed. For example, the package &lt;code&gt;babel-core&lt;/code&gt; will allow gulp to read from a &lt;code&gt;gulpfile.babel.js&lt;/code&gt; file with ES6 syntax.&lt;/p&gt;
</description>
        <pubDate>Thu, 16 Jul 2015 07:00:00 -0500</pubDate>
        <link>http://zesk8.github.io/15/07/yeoman-gulp-grunt</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/07/yeoman-gulp-grunt</guid>
        
        
        <category>yeoman</category>
        
        <category>front-end</category>
        
        <category>javascript</category>
        
        <category>node</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code&gt;jekyll serve --watch&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;Tom&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints &amp;#39;Hi, Tom&amp;#39; to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Check out the &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://github.com/jekyll/jekyll-help&quot;&gt;Jekyll’s dedicated Help repository&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 09 Jul 2015 12:30:47 -0500</pubDate>
        <link>http://zesk8.github.io/15/07/welcome-to-jekyll</link>
        <guid isPermaLink="true">http://zesk8.github.io/15/07/welcome-to-jekyll</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
